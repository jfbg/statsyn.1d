LeoLibText: Text writing routines for use with LeoLib Verion 0.9

OVERVIEW
Writing Text is reasonably straightforward in LeoLib.  Text can be
written at any angle.  The only complication is selecting a font.

X-Windows fonts are named according to the XLFD (X-Windows Logical Font
Description Standard) which is quite complicated.  To understand it, try
reading Appendix A of The Xlib Programming Manual, Volume One in The
Definitve Guides to the X Window System, published by O'Reilly &
Associates.  Or, more simply run the standard X utility, xfontsel, which
will let you play around with font descriptions, and see the huge array
of available fonts.  The program xlsfonts will list all available fonts.
Some simple ones that will almost always be available are "9x15" or
"9x15bold".  (Note these are exceptions, and not proper XLFD font names.)

To use text, first a font must be loaded.  Fonts are loaded with the
lloadfont command.  Lloadfont requires a string which is a font name, and
returns a number which will be used to refer to that font from thereon.

Note that all text is written in the present Graphics Context (GC).  See
LeoLibDraw for details.

THE COMMANDS

lloadfont(num,name)
This loads the font of the specified name from the X-server.  Num returns the
number of loaded fonts, at this point, which will also be the index used from
there on to refer to this font.  Font names may contain wildcards, and must
conform to the XLFD protocol.  See the overview for a description of X Font
names.  Note that when a font is loaded, it is automatically selected as the
present writing font.

lsetfont(which)
This selects the font to be used for text writing.  The which parameter
specifies the font index to use.  Which=1 would select the first font loaded,
which=2 the second, etc.  A font must be loaded with lloadfont before it can 
be drawn to the screen.  Note that loadeing a font automatically selects it
for writing as well.

laligntext(code)
This selects how text will be aligned when it is drawn.  Code can take a
value between 1 and 9.  The code determines which part of the text will
be placed on the specified point as follows:
1: bottom left corner  (Default)
2: bottom of the text, centered horizontally
3: bottom right corner 
4: vertical middle of the text, on the left edge
5: absolute middle of the text
6: vertical middle of the text, on the right edge
7: top left corner
8: top of the text, centered horizontally
9: top right corner 

ltextangle(angle)
This selects the angle at which text will be written.  The default value
is 0, which results in text written normally, from left to right.
Angles should be of type REAL, and should be in degrees, taking any
value from 0 to 360.  An angle of 90 results in text written up the
page.  (Angles are measured counterclockwise from horizontal.)

lprint(text)
Displays the contents of the string text on the screen at the Current
Position (CP).  The CP is specified with the lmoveto command.  Text
should be a normal ascii string.  (Actually, it can contain extended
ascii characters, according to whatever font is loaded at the time.
Almost all X fonts conform to the ISO8859-1 standard.)

ACKNOWLEDGEMENTS
The text rotation, positioning, and magnification routines are taken 
with thanks from XVerText Version 5.0, by Alan Richardson.  

BUGS
A maximum of 30 fonts can be loaded.  This number is hardcoded.  To increase
it, change the #define statement at the beginning of the leotext.c
sourcefile, and recompile the library.

SEE ALSO
LeoLib for control routines
LeoLibDraw for routines to place text, and determine its color.
