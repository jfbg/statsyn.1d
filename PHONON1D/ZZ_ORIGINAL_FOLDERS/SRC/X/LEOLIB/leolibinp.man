LeoLibInp: Input routines for use with LeoLib Version 0.9

OVERVIEW
LeoLib sheilds the user from all the nasties of raw X-Windows input
routines.  There are just a few basic routines for getting mouse or
keyboard input from the user.

THE COMMANDS

lwaitforbuttondown(but, x, y, mod)
Waits for the user to hit a button on the mouse.  The program can only
respond to the button being pressed while the pointer is within the
LeoLib window.  The parameter but returns which mouse button has been 
pressed.  (1 for the left, 2 for the center, 3 for the right.)  (x,y) 
is the position in window coordinates where the pointer was when the 
button was pressed.  Mod is an integer whose bits tell the state of 
the modifier keys and the other buttons when the button was pressed.
For a description of mod, see lmodmasks.

lwaitforbuttonup(but,x,y,mod)
Same as lwaitforbuttondown, but reponds only to buttons being released,
not pressed.

lwaitforbutton(but,x,y,mod)
Same as lwaitforbuttonup, but it will respond either to a button being
pressed, or released.  To distinguish between the two types of events,
the parameter but is set to a positive value if the button was
depressed, and a negative value if the button was released.

lmodmasks(shift,lock,control, mod1,mod2,mod3,mod4,mod5, but1,but2,
but3,but4,but5)
This imposing looking routine allows a program to decipher the
information contained in the mod parameter of an lwaitforbutton...
routine.  The mod parameter tells the user the state of the keyboard
modifier keys, and the mouse buttons just before the user presses or
releases a mouse button.  Modifier keys are things like Shift, Control,
Caps lock, etc.  
Each of the parameters passed to lmodmasks gets set to an 32 bit integer 
with exactly one bit set to 1.  These bits correspond to bits in the mod
parameter.  If the bit in shift is set in mod, then the user was holding
down the shift key while pressing or releasing the mouse button.  
If the lock bit is set, then Caps Lock was on.
If the Control bit is set, then the control key was being held.
The variables but1 through but5 refer to the 5 possible mouse buttons 
(a 1 indicating that the mouse button was being held down when a button 
was pressed or released).
The variables mod1 through mod5 refer to other "modifier" keys on the
keyboard, which vary from computer to computer.  On the Sparc IPX this
was developed on, Mod1 represented either key with a Diamond on it; Mod2
represented any of [Props], [Copy], [Paste], [Find], or [Cut] on the
left sie of the keyboard; Mod3 referred to the [AltGraph] key, Mod4
referred to the NumLock, and Mod5 did nothing.

lwarp(x,y)
Suddenly warps the mouse pointer to the specified position in the LeoLib
window.  Note that this tends to confuse the user.

lcursor(which)
Selects what symbol should be used for the mouse pointer (cursor).  0 gives
the default.  1 removes the cursor entirely.  (Beware of this.)  Any other 
value looks in the predefined cursor font.  Values are given in 
$OPENWINHOME/include/X11/cursorfont.h.  Pictures are in Appendix
I of the Xlib reference manual.

leventwait(main,x,y,mod,typ)
This waits for and responds to a variety of types of events.  Which events
this routine responds to is set with leventtypeon and leventtypeoff.  The
parameters x, and y return the position of the pointer when the event
occured.  The parameter mod returns the values of the modifier keys and mouse
buttons just before the event occured, as described in lmodmasks.  The main
parameter is event specific.  For a button event, it returns the number
representing the button responsible for the event.  For a key event, main is
set to the ascii value of the key responsible.  For a motion event, main is
not used.  For either key or button events, the main parameter is positive if
the item is being depressed, and negative if it is being released.
The parameter typ gets set to the type of event which occurred.  They
are numbered the same as in leventtypeon

leventtypeon(which)
Causes leventwait to respond to the specified type of events.  The parameter
which is encoded as follows:
1: Key being depressed
2: Key being released
3: Mouse button being depressed
4: Mouse button being released
5: Mouse pointer being moved
6: Mous pointer motion hints.

leventtypeoff(which)
Causes leventwait not to respond to the specified type of events.  The
parameter which is interpretted in the same was as for leventtypeon.
If a 0 is passed for which, then all event types are turned off.
(Note that leventwait will cause an error if all events are turned
off.)

lwherecursor(x,y,mod)
Gets the location of the cursor, and the state of the modifier keys
at the time.  Will return positions outside of the LeoLib window.


BUGS
The KeyPress / KeyRelease functions will only respond to the first character
in a multi-character string which has been mapped into a key.  

Due to a quirk in X-Windows protocol, which is best left alone, a 
buttonrelease cannot be detected unless the correponding buttonpress is also
detected.  A similar "feature" of key events is that if a key is pressed
while the pointer is in a window, and then the pointer is moved out of
the window before the key is released, then that window still gets the
keyrelease event even though it occured outside the window.

lwherecursor does not understand multi-screen displays.  (Multiple
monitors used for the same X-server.)

SEE ALSO
leolib -- for control routines
